    /*private fun sendNotification(context: Context?) {
        val intent: Intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        val pendingIntent: PendingIntent = PendingIntent.getActivity(context, 0, intent, 0)

        // Bitmap converter
        //val bitmap = BitmapFactory.decodeResource(context?.resources, R.drawable.time)
        //val bitmapLargeIcon = BitmapFactory.decodeResource(context?.resources, R.drawable.clock)


        val builder = context?.let {
            NotificationCompat.Builder(it, CHANNEL_ID)
                .setSmallIcon(R.drawable.home_icon)
                .setContentTitle("Facebook time-limit reached")
                .setContentText("You have used Facebook for 50/50 minutes today.")
                // Set icons
                //.setLargeIcon(bitmap)
                .setStyle(
                    NotificationCompat.BigTextStyle()
                        .bigText("Yo man, you really need to get off Facebook. Why don't you go for a walk or something?")
                )
                // Set intent so you can click on it
                .setContentIntent(pendingIntent)
                .setPriority(NotificationCompat.PRIORITY_HIGH)
        }

        if (builder != null) {
            context?.let { NotificationManagerCompat.from(it) }?.let {
                with(it) {
                    this?.notify(notificationID, builder.build())
                }
            }
        }
    }  */

       /*val builder:NotificationCompat.Builder = NotificationCompat.Builder(context).
        setSmallIcon(R.drawable.chronoboss_48x48).
        setTicker("ticker").
        setContentTitle("new notification").
        setContentText("new message").
        setAutoCancel(true)
        val mNotificationManager:NotificationManager = context?.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        mNotificationManager.notify(0, builder.build()) */

        /*private fun showNotification(context: Context?) {
            val contentIntent: PendingIntent =
                PendingIntent.getActivity(context, 0, Intent(context, MainActivity::class.java), 0)
            val mBuilder: NotificationCompat.Builder? = context?.let {
                NotificationCompat.Builder(it).setSmallIcon(R.drawable.ic_launcher_foreground)
                    .setContentTitle("my notification").setContentText("hello world")
            }
            if (mBuilder != null) {
                mBuilder.setContentIntent(contentIntent)
                mBuilder.setDefaults(Notification.DEFAULT_SOUND)
                mBuilder.setAutoCancel(true)
            }
            val mNotificationManager: NotificationManager =
                context?.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            if (mBuilder != null) {
                mNotificationManager.notify(1, mBuilder.build())
            }
        }
    } */

        /**private void showNotification(Context context) {
        mBuilder.setContentIntent(contentIntent);
        mBuilder.setDefaults(Notification.DEFAULT_SOUND);
        mBuilder.setAutoCancel(true);
        NotificationManager mNotificationManager =
        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
        mNotificationManager.notify(1, mBuilder.build());

        } */


        /*private fun createNotificationChannel(context: Context?) {
            // Creates notification on versions Oreo and above
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                val name = "Notification Title"
                val descriptionText = "Notification Description"
                val importance = NotificationManager.IMPORTANCE_DEFAULT
                val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                    description = descriptionText
                }
                // Register channel with system
                val notificationManager: NotificationManager =
                    context?.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                notificationManager.createNotificationChannel(channel)
            }
        } */